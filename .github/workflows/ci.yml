name: CI

on:
  push:
    branches: [ develop, feature/*, bugfix/*, release/*, hotfix/* ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/CODEOWNERS'
      - '.github/pull_request_template.md'
      - '.github/*.md'
  pull_request:
    branches: [ main ]  # Pull requests are only required for the main branch

jobs:
  check-docs-only:
    runs-on: ubuntu-latest
    outputs:
      docs-only: ${{ steps.filter.outputs.docs_only }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check for documentation-only changes
        id: filter
        run: |
          # For pull requests, fetch the base branch
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }} --depth=1
          fi
          
          # Determine which files have changed
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          else
            # For push events
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || git diff --name-only HEAD~1 HEAD)
          fi
          
          # If CHANGED_FILES is empty, fetch more history and try again
          if [[ -z "$CHANGED_FILES" ]]; then
            git fetch --unshallow || true
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
            else
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || git diff --name-only HEAD~1 HEAD)
            fi
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if only documentation files were changed
          DOCS_ONLY="true"
          for file in $CHANGED_FILES; do
            if [[ ! $file =~ \.(md)$ ]] && [[ ! $file =~ ^docs/ ]] && [[ ! $file =~ ^\.github/.*\.(md|yaml|yml)$ ]]; then
              DOCS_ONLY="false"
              echo "Non-doc file found: $file"
              break
            fi
          done
          
          echo "docs_only=$DOCS_ONLY" >> $GITHUB_OUTPUT
          echo "::notice::Documentation only change: $DOCS_ONLY"

  lint-and-test:
    needs: check-docs-only
    if: needs.check-docs-only.outputs.docs-only != 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Project Structure Check
      id: structure-check
      run: |
        echo "Checking project structure..."
        HAS_ROOT_PACKAGE="false"
        HAS_FRONTEND="false"
        HAS_BACKEND="false"
        
        if [ -f "package.json" ]; then
          echo "Root package.json found"
          HAS_ROOT_PACKAGE="true"
        fi
        
        if [ -f "frontend/package.json" ]; then
          echo "Frontend package.json found"
          HAS_FRONTEND="true"
        fi
        
        if [ -f "backend/package.json" ]; then
          echo "Backend package.json found" 
          HAS_BACKEND="true"
        fi
        
        echo "has_root=$HAS_ROOT_PACKAGE" >> $GITHUB_OUTPUT
        echo "has_frontend=$HAS_FRONTEND" >> $GITHUB_OUTPUT
        echo "has_backend=$HAS_BACKEND" >> $GITHUB_OUTPUT
        
    - name: Install Root Dependencies
      if: steps.structure-check.outputs.has_root == 'true'
      run: |
        echo "Installing root dependencies..."
        npm ci || npm install
      continue-on-error: true
      
    - name: Install Frontend Dependencies
      if: steps.structure-check.outputs.has_frontend == 'true'
      working-directory: ./frontend
      run: |
        echo "Installing frontend dependencies..."
        npm ci || npm install
      continue-on-error: true
      
    - name: Install Backend Dependencies
      if: steps.structure-check.outputs.has_backend == 'true'
      working-directory: ./backend
      run: |
        echo "Installing backend dependencies..."
        npm ci || npm install
      continue-on-error: true
    
    - name: Lint
      run: |
        if [ -f "package.json" ] && grep -q "\"lint\"" package.json; then
          npm run lint
        elif [ -f "frontend/package.json" ] && grep -q "\"lint\"" frontend/package.json; then
          cd frontend && npm run lint
        elif [ -f "backend/package.json" ] && grep -q "\"lint\"" backend/package.json; then
          cd backend && npm run lint
        else
          echo "No lint script found, skipping"
        fi
      continue-on-error: true
      
    - name: Type Check
      run: |
        if [ -f "package.json" ] && grep -q "\"typecheck\"" package.json; then
          npm run typecheck
        elif [ -f "frontend/package.json" ] && grep -q "\"typecheck\"" frontend/package.json; then
          cd frontend && npm run typecheck
        elif [ -f "backend/package.json" ] && grep -q "\"typecheck\"" backend/package.json; then
          cd backend && npm run typecheck
        else
          echo "No typecheck script found, skipping"
        fi
      continue-on-error: true
      
    - name: Test
      run: |
        if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
          npm test
        elif [ -f "frontend/package.json" ] && grep -q "\"test\"" frontend/package.json; then
          cd frontend && npm test
        elif [ -f "backend/package.json" ] && grep -q "\"test\"" backend/package.json; then
          cd backend && npm test
        else
          echo "No test script found, skipping"
        fi
      continue-on-error: true

  docs-success:
    needs: check-docs-only
    if: needs.check-docs-only.outputs.docs-only == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Documentation only change
        run: |
          echo "::notice::Only documentation files were changed. Skipping build and test steps."
          echo "This is a documentation-only change, so CI checks are automatically passing."
      
      - name: Verify Documentation Files
        run: |
          # Simple check to make sure all markdown files are valid
          echo "Verifying documentation files..."
          # List all documentation files that were modified
          git fetch origin ${{ github.base_ref || 'main' }} --depth=1
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref || 'main' }}..HEAD 2>/dev/null || git diff --name-only HEAD~1 HEAD)
          DOC_FILES=$(echo "$CHANGED_FILES" | grep -E '\.md$|^docs/|^\.github/.*\.(md|yaml|yml)$')
          
          echo "Changed documentation files:"
          echo "$DOC_FILES"
          
          # Check if any files have broken links (simple check)
          for file in $DOC_FILES; do
            if [ -f "$file" ] && [[ "$file" == *.md ]]; then
              echo "Checking $file for broken internal links..."
              # This is a simple check for broken internal references
              grep -o "\[.*\](.*)" "$file" | grep -v "http" | grep -v "https" | grep -v "#" || true
            fi
          done
          
          echo "Documentation verification complete!"